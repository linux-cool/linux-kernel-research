# 多智能体系统Docker Compose配置
version: '3.8'

services:
  # Redis - 用于消息队列和缓存
  redis:
    image: redis:7-alpine
    container_name: multi_agent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - agent_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL - 用于持久化存储
  postgres:
    image: postgres:15-alpine
    container_name: multi_agent_postgres
    environment:
      POSTGRES_DB: multi_agent_db
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d multi_agent_db"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ - 消息代理
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: multi_agent_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: agent_user
      RABBITMQ_DEFAULT_PASS: agent_password
    ports:
      - "5672:5672"    # AMQP端口
      - "15672:15672"  # 管理界面
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - agent_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Coordinator Agent - 协调器智能体
  coordinator:
    build:
      context: .
      dockerfile: Dockerfile.coordinator
    container_name: coordinator_agent
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/multi_agent_db
      - RABBITMQ_URL=amqp://agent_user:agent_password@rabbitmq:5672/
      - AGENT_TYPE=coordinator
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - agent_network
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped

  # Research Agent - 研究智能体
  research_agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/multi_agent_db
      - RABBITMQ_URL=amqp://agent_user:agent_password@rabbitmq:5672/
      - AGENT_TYPE=research
      - AGENT_ID=research_001
      - LOG_LEVEL=INFO
    depends_on:
      - coordinator
    networks:
      - agent_network
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    deploy:
      replicas: 2

  # Analysis Agent - 分析智能体
  analysis_agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/multi_agent_db
      - RABBITMQ_URL=amqp://agent_user:agent_password@rabbitmq:5672/
      - AGENT_TYPE=analysis
      - AGENT_ID=analysis_001
      - LOG_LEVEL=INFO
    depends_on:
      - coordinator
    networks:
      - agent_network
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    deploy:
      replicas: 2

  # Monitoring - Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: multi_agent_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agent_network
    restart: unless-stopped

  # Grafana - 可视化仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: multi_agent_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agent_network
    restart: unless-stopped

  # Nginx - 负载均衡和反向代理
  nginx:
    image: nginx:alpine
    container_name: multi_agent_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - coordinator
    networks:
      - agent_network
    restart: unless-stopped

  # Jaeger - 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: multi_agent_jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - agent_network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agent_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
